var searchIndex = JSON.parse('{\
"leetcode":{"doc":"","i":[[3,"ListNode","leetcode","LeetCode 里常用到的链表节点结构",null,null],[12,"val","","",0,null],[12,"next","","",0,null],[3,"TreeNode","","LeetCode 题目中用到的树的节点结构",null,null],[12,"val","","",1,null],[12,"left","","",1,null],[12,"right","","",1,null],[11,"new","","",0,[[]]],[11,"from_vec","","从 `Vec<i32>` 构建链表结构。建议使用宏 `list!`",0,[[["vec",3]],[["box",3],["option",4]]]],[11,"into_vec","","",0,[[["box",3],["option",4]],["vec",3]]],[11,"new","","",1,[[]]],[11,"from_vec","","从 `Vec<Option<i32>>` 生成树结构。一般建议使用宏 `tree!`",1,[[["option",4],["vec",3]],[["option",4],["rc",3]]]],[0,"two_sum","","1. 两数之和难度 简单",null,null],[3,"Solution","leetcode::two_sum","",null,null],[11,"two_sum","","利用 `try_fold` 的 short-circuiting，根据题目的设定，会有一个答案，找到就利用…",2,[[["vec",3]],["vec",3]]],[0,"add_two_numbers","leetcode","2. 两数相加难度 中等",null,null],[3,"Solution","leetcode::add_two_numbers","这一题与 sum_lists 基本上一样，除了进阶。",null,null],[11,"add_two_numbers","","",3,[[["box",3],["option",4]],[["box",3],["option",4]]]],[0,"single_numbers","leetcode","剑指 Offer 56 - I. 数组中数字出现的次数一个整型数组 nums…",null,null],[3,"Solution","leetcode::single_numbers","",null,null],[11,"single_numbers","","异或运算，消除出现了再次的数字，剩下就是要找的目标数字的异或结果 a ^ b再通过区分最低位的 1…",4,[[["vec",3]],["vec",3]]],[0,"set_mismatch","leetcode","645. 错误的集合难度 简单",null,null],[3,"Solution","leetcode::set_mismatch","异或操作",null,null],[11,"find_error_nums","","",5,[[["vec",3]],["vec",3]]],[0,"max_consecutive_ones","leetcode","485. 最大连续1的个数难度 简单",null,null],[3,"Solution","leetcode::max_consecutive_ones","",null,null],[11,"find_max_consecutive_ones","","使用 `Iterator` 会很简单",6,[[["vec",3]]]],[0,"merge_k_sorted_lists","leetcode","23. 合并K个升序链表难度 困难",null,null],[3,"ListNode","leetcode::merge_k_sorted_lists","",null,null],[12,"val","","",7,null],[12,"next","","",7,null],[3,"Solution","","",null,null],[11,"new","","",7,[[]]],[11,"merge_k_lists","","使用 BinaryHeap，但需要转化为小顶堆",8,[[["option",4],["vec",3]],[["option",4],["box",3]]]],[0,"ser_des_bst","leetcode","449. 序列化和反序列化二叉搜索树难度 中等",null,null],[3,"Codec","leetcode::ser_des_bst","",null,null],[11,"serialize","","",9,[[["option",4],["rc",3]],["string",3]]],[11,"deserialize","","",9,[[["string",3]],[["option",4],["rc",3]]]],[0,"subseq","leetcode","392. 判断子序列难度 简单",null,null],[3,"Solution","leetcode::subseq","",null,null],[3,"Matching","","后续挑战 预处理字符串",null,null],[11,"is_subsequence","","",10,[[["string",3]]]],[11,"simple_match","","类似双指针",10,[[]]],[11,"new","","",11,[[["string",3]]]],[11,"is_match","","",11,[[["string",3]]]],[0,"combination_sum_4","leetcode","377. 组合总和 Ⅳ难度 中等",null,null],[3,"Solution","leetcode::combination_sum_4","",null,null],[11,"combination_sum4","","",12,[[["vec",3]]]],[0,"decode_string","leetcode","394. 字符串解码难度 中等",null,null],[3,"Solution","leetcode::decode_string","",null,null],[11,"decode_string","","递归",13,[[["string",3]],["string",3]]],[0,"search_range","leetcode","34. 在排序数组中查找元素的第一个和最后一个位置难度 中等",null,null],[3,"Solution","leetcode::search_range","",null,null],[11,"search_range","","二分法，找到 target 的 lower 和 high 边界",14,[[["vec",3]],["vec",3]]],[0,"simplify_path","leetcode","71. 简化路径难度 中等",null,null],[3,"Solution","leetcode::simplify_path","",null,null],[11,"simplify_path","","使用 `Iterator` 操作会很简单",15,[[["string",3]],["string",3]]],[0,"all_one","leetcode","432. 全 O(1) 的数据结构难度 困难",null,null],[3,"AllOne","leetcode::all_one","双向链表 + 两个 HashMap",null,null],[11,"new","","Initialize your data structure here. ",16,[[]]],[11,"inc","","Inserts a new key with value 1. Or increments an existing…",16,[[["string",3]]]],[11,"dec","","Decrements an existing key by 1. If Key\'s value is 1,…",16,[[["string",3]]]],[11,"get_max_key","","Returns one of the keys with maximal value. ",16,[[],["string",3]]],[11,"get_min_key","","Returns one of the keys with Minimal value. ",16,[[],["string",3]]],[0,"sort_list","leetcode","21. 合并两个有序链表难度 简单",null,null],[3,"Solution","leetcode::sort_list","",null,null],[11,"sort_list","","Bottom Up Merge Sort",17,[[["box",3],["option",4]],[["box",3],["option",4]]]],[0,"gen_parentheses","leetcode","22. 括号生成难度 中等",null,null],[3,"Solution","leetcode::gen_parentheses","",null,null],[11,"generate_parenthesis","","",18,[[],[["vec",3],["string",3]]]],[0,"rotate_list","leetcode","61. 旋转链表难度 中等",null,null],[3,"Solution","leetcode::rotate_list","",null,null],[11,"rotate_right","","双指针，两个 mut 所以需要用到 unsafe",19,[[["box",3],["option",4]],[["box",3],["option",4]]]],[11,"rotate_right_unsafe","","",19,[[["box",3],["option",4]],[["box",3],["option",4]]]],[11,"rotate_right_safe","","单指针（引用），安全版本",19,[[["box",3],["option",4]],[["box",3],["option",4]]]],[0,"mid_list","leetcode","876. 链表的中间结点难度 简单",null,null],[3,"Solution","leetcode::mid_list","快慢指针",null,null],[11,"middle_node","","",20,[[["box",3],["option",4]],[["box",3],["option",4]]]],[0,"dedup","leetcode","80. 删除排序数组中的重复项 II难度 中等",null,null],[3,"Solution","leetcode::dedup","",null,null],[11,"remove_duplicates","","",21,[[["vec",3]]]],[11,"remove_duplicates_dedup","","Use `Vec<_>::dedup_by()`",21,[[["vec",3]]]],[0,"delete_node","leetcode","剑指 Offer 18. 删除链表的节点难度 简单",null,null],[3,"Solution","leetcode::delete_node","",null,null],[11,"delete_node","","",22,[[["box",3],["option",4]],[["box",3],["option",4]]]],[0,"remove_elements","leetcode","203. 移除链表元素难度 简单",null,null],[3,"Solution","leetcode::remove_elements","",null,null],[11,"remove_elements","","",23,[[["box",3],["option",4]],[["box",3],["option",4]]]],[0,"reverse_list","leetcode","206. 反转链表难度 简单",null,null],[3,"Solution","leetcode::reverse_list","",null,null],[11,"reverse_list","","",24,[[["box",3],["option",4]],[["box",3],["option",4]]]],[0,"remove_nth_node_from_end_of_list","leetcode","19. 删除链表的倒数第N个节点难度 中等",null,null],[3,"Solution","leetcode::remove_nth_node_from_end_of_list","",null,null],[11,"remove_nth_from_end","","双指针/快慢指针",25,[[["box",3],["option",4]],[["box",3],["option",4]]]],[0,"remove_duplicates_from_sorted_list","leetcode","83. 删除排序链表中的重复元素难度 简单",null,null],[3,"Solution","leetcode::remove_duplicates_from_sorted_list","",null,null],[11,"delete_duplicates","","",26,[[["box",3],["option",4]],[["box",3],["option",4]]]],[0,"remove_duplicates_from_sorted_list_ii","leetcode","82. 删除排序链表中的重复元素 II难度 中等",null,null],[3,"Solution","leetcode::remove_duplicates_from_sorted_list_ii","",null,null],[11,"delete_duplicates","","",27,[[["box",3],["option",4]],[["box",3],["option",4]]]],[11,"delete_duplicates_2","","",27,[[["box",3],["option",4]],[["box",3],["option",4]]]],[0,"odd_even_linked_list","leetcode","328. 奇偶链表难度 中等",null,null],[3,"Solution","leetcode::odd_even_linked_list","",null,null],[11,"odd_even_list","","",28,[[["box",3],["option",4]],[["box",3],["option",4]]]],[0,"reverse_print","leetcode","剑指 Offer 06. 从尾到头打印链表难度 简单",null,null],[3,"Solution","leetcode::reverse_print","",null,null],[11,"reverse_print","","",29,[[["box",3],["option",4]],["vec",3]]],[0,"sum_lists","leetcode","面试题 02.05. 链表求和难度 中等",null,null],[3,"Solution","leetcode::sum_lists","这一题与 add_two_numbers 基本上一样，增加了进阶。",null,null],[11,"add_two_numbers","","反向链表，即从低位到高位，每位相加，记录进位。",30,[[["box",3],["option",4]],[["box",3],["option",4]]]],[11,"add_two_numbers_forward","","进阶，正向链表，用 `Vec` 模拟栈，结果插入新节点时，插入到头部，其它一样",30,[[["box",3],["option",4]],[["box",3],["option",4]]]],[0,"first_missing_positive","leetcode","41. 缺失的第一个正数难度 困难",null,null],[3,"Solution","leetcode::first_missing_positive","",null,null],[11,"first_missing_positive","","",31,[[["vec",3]]]],[0,"utf8_validation","leetcode","393. UTF-8 编码验证难度 中等",null,null],[3,"Solution","leetcode::utf8_validation","",null,null],[11,"valid_utf8","","支持 Pattern Matching 的语言做这种事很简单。",32,[[["vec",3]]]],[0,"integer_replacement","leetcode","397. 整数替换难度 中等",null,null],[3,"Solution","leetcode::integer_replacement","",null,null],[11,"integer_replacement","","",33,[[]]],[0,"invert_tree","leetcode","226. 翻转二叉树难度 简单",null,null],[3,"Solution","leetcode::invert_tree","",null,null],[11,"invert_tree","","",34,[[["option",4],["rc",3]],[["option",4],["rc",3]]]],[0,"nth_digit","leetcode","400. 第N个数字难度 中等",null,null],[3,"Solution","leetcode::nth_digit","",null,null],[11,"find_nth_digit","","",35,[[]]],[0,"compare_version_numbers","leetcode","165. 比较版本号难度 中等",null,null],[3,"Solution","leetcode::compare_version_numbers","",null,null],[11,"compare_version","","使用 `Iterator` 和 Pattern Matching 很简洁",36,[[["string",3]]]],[0,"power_of_two","leetcode","231. 2的幂难度 简单",null,null],[3,"Solution","leetcode::power_of_two","",null,null],[11,"is_power_of_two","","2 的幂：大于 0，而且二进制表示中只有一个 1。",37,[[]]],[0,"parse_lisp","leetcode","736. Lisp 语法解析难度 困难",null,null],[3,"Solution","leetcode::parse_lisp","用 Rust 写代码，无法对错误视而不见。 只有在最后调用的时候假设输入都是合法的。",null,null],[11,"evaluate","","",38,[[["string",3]]]],[0,"tag_validator","leetcode","591. 标签验证器难度 困难",null,null],[3,"Solution","leetcode::tag_validator","用有限状态机，处理几个有限的状态就解决了。",null,null],[11,"is_valid","","",39,[[["string",3]]]],[0,"longest_valid_parentheses","leetcode","32. 最长有效括号难度 困难",null,null],[3,"Solution","leetcode::longest_valid_parentheses","Rust 的抽象层次很高，高级抽象，几乎零开销，函数式，高阶函数， Pattern Matching…",null,null],[11,"longest_valid_parentheses","","",40,[[["string",3]]]],[0,"powx_n","leetcode","50. Pow(x, n)难度 中等",null,null],[3,"Solution","leetcode::powx_n","",null,null],[11,"my_pow","","把 n 考虑成 2 进制表示，例如 100_1011 = 10_0000 + 1000 + 10 + 1 所以，x…",41,[[]]],[0,"merge_sorted_array","leetcode","88. 合并两个有序数组难度 简单",null,null],[3,"Solution","leetcode::merge_sorted_array","",null,null],[11,"merge","","",42,[[["vec",3]]]],[0,"subsets","leetcode","78. 子集难度 中等",null,null],[3,"Solution","leetcode::subsets","",null,null],[11,"subsets","","",43,[[["vec",3]],[["vec",3],["vec",3]]]],[0,"subsets_ii","leetcode","90. 子集 II难度 中等",null,null],[3,"Solution","leetcode::subsets_ii","",null,null],[11,"subsets_with_dup","","回溯法",44,[[["vec",3]],[["vec",3],["vec",3]]]],[0,"pascals_triangle","leetcode","118. 杨辉三角难度 简单",null,null],[3,"Solution","leetcode::pascals_triangle","",null,null],[11,"generate","","",45,[[],[["vec",3],["vec",3]]]],[0,"pascals_triangle_ii","leetcode","119. 杨辉三角 II难度 简单",null,null],[3,"Solution","leetcode::pascals_triangle_ii","",null,null],[11,"get_row","","",46,[[],["vec",3]]],[0,"string_to_integer_atoi","leetcode","8. 字符串转换整数 (atoi)难度 中等",null,null],[3,"Solution","leetcode::string_to_integer_atoi","",null,null],[11,"my_atoi","","FSM",47,[[["string",3]]]],[0,"valid_number","leetcode","65. 有效数字难度 困难",null,null],[3,"Solution","leetcode::valid_number","DFA",null,null],[11,"is_number","","",48,[[["string",3]]]],[0,"fibonacci_number","leetcode","509. 斐波那契数难度 简单",null,null],[3,"Solution","leetcode::fibonacci_number","",null,null],[11,"fib","","",49,[[]]],[0,"fibonacci_number_offer","leetcode","剑指 Offer 10- I. 斐波那契数列难度 简单",null,null],[3,"Solution","leetcode::fibonacci_number_offer","",null,null],[11,"fib","","",50,[[]]],[0,"minimum_path_sum","leetcode","64. 最小路径和难度 中等",null,null],[3,"Solution","leetcode::minimum_path_sum","",null,null],[11,"min_path_sum","","",51,[[["vec",3],["vec",3]]]],[0,"longest_absolute_file_path","leetcode","388. 文件的最长绝对路径难度 中等",null,null],[3,"Solution","leetcode::longest_absolute_file_path","",null,null],[11,"length_longest_path","","用 Rust 的 `Iterator` 写函数式的解法。",52,[[["string",3]]]],[0,"number_of_good_pairs","leetcode","1512. 好数对的数目难度 简单",null,null],[3,"Solution","leetcode::number_of_good_pairs","",null,null],[11,"num_identical_pairs","","",53,[[["vec",3]]]],[0,"max_sliding_window","leetcode","239. 滑动窗口最大值难度 困难",null,null],[3,"Solution","leetcode::max_sliding_window","",null,null],[11,"max_sliding_window","","",54,[[["vec",3]],["vec",3]]],[14,"list","leetcode","Generate a linked list from a vec-like syntax.",null,null],[14,"tree","","Generate a tree structure from a vec-like syntax.",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","leetcode::two_sum","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","leetcode::add_two_numbers","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","leetcode::single_numbers","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","leetcode::set_mismatch","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","leetcode::max_consecutive_ones","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","leetcode::merge_k_sorted_lists","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","leetcode::ser_des_bst","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","leetcode::subseq","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","leetcode::combination_sum_4","",12,[[]]],[11,"into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","leetcode::decode_string","",13,[[]]],[11,"into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","leetcode::search_range","",14,[[]]],[11,"into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","leetcode::simplify_path","",15,[[]]],[11,"into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","leetcode::all_one","",16,[[]]],[11,"into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","leetcode::sort_list","",17,[[]]],[11,"into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","leetcode::gen_parentheses","",18,[[]]],[11,"into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","leetcode::rotate_list","",19,[[]]],[11,"into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","leetcode::mid_list","",20,[[]]],[11,"into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","leetcode::dedup","",21,[[]]],[11,"into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","leetcode::delete_node","",22,[[]]],[11,"into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","leetcode::remove_elements","",23,[[]]],[11,"into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from","leetcode::reverse_list","",24,[[]]],[11,"into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from","leetcode::remove_nth_node_from_end_of_list","",25,[[]]],[11,"into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from","leetcode::remove_duplicates_from_sorted_list","",26,[[]]],[11,"into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"from","leetcode::remove_duplicates_from_sorted_list_ii","",27,[[]]],[11,"into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"from","leetcode::odd_even_linked_list","",28,[[]]],[11,"into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"from","leetcode::reverse_print","",29,[[]]],[11,"into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"from","leetcode::sum_lists","",30,[[]]],[11,"into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"from","leetcode::first_missing_positive","",31,[[]]],[11,"into","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"from","leetcode::utf8_validation","",32,[[]]],[11,"into","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"from","leetcode::integer_replacement","",33,[[]]],[11,"into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"from","leetcode::invert_tree","",34,[[]]],[11,"into","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"from","leetcode::nth_digit","",35,[[]]],[11,"into","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"from","leetcode::compare_version_numbers","",36,[[]]],[11,"into","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"from","leetcode::power_of_two","",37,[[]]],[11,"into","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"from","leetcode::parse_lisp","",38,[[]]],[11,"into","","",38,[[]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"from","leetcode::tag_validator","",39,[[]]],[11,"into","","",39,[[]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"from","leetcode::longest_valid_parentheses","",40,[[]]],[11,"into","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"from","leetcode::powx_n","",41,[[]]],[11,"into","","",41,[[]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"from","leetcode::merge_sorted_array","",42,[[]]],[11,"into","","",42,[[]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"from","leetcode::subsets","",43,[[]]],[11,"into","","",43,[[]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"from","leetcode::subsets_ii","",44,[[]]],[11,"into","","",44,[[]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"from","leetcode::pascals_triangle","",45,[[]]],[11,"into","","",45,[[]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"from","leetcode::pascals_triangle_ii","",46,[[]]],[11,"into","","",46,[[]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"from","leetcode::string_to_integer_atoi","",47,[[]]],[11,"into","","",47,[[]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"from","leetcode::valid_number","",48,[[]]],[11,"into","","",48,[[]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"from","leetcode::fibonacci_number","",49,[[]]],[11,"into","","",49,[[]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"from","leetcode::fibonacci_number_offer","",50,[[]]],[11,"into","","",50,[[]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"from","leetcode::minimum_path_sum","",51,[[]]],[11,"into","","",51,[[]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"from","leetcode::longest_absolute_file_path","",52,[[]]],[11,"into","","",52,[[]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"try_into","","",52,[[],["result",4]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"from","leetcode::number_of_good_pairs","",53,[[]]],[11,"into","","",53,[[]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"from","leetcode::max_sliding_window","",54,[[]]],[11,"into","","",54,[[]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"drop","leetcode::all_one","Must pop every node to drop allocated memory of nodes",16,[[]]],[11,"clone","leetcode","",0,[[],["listnode",3]]],[11,"clone","leetcode::merge_k_sorted_lists","",7,[[],["listnode",3]]],[11,"default","leetcode::all_one","",16,[[],["allone",3]]],[11,"cmp","leetcode::merge_k_sorted_lists","",7,[[],["ordering",4]]],[11,"eq","leetcode","",0,[[["listnode",3]]]],[11,"ne","","",0,[[["listnode",3]]]],[11,"eq","","",1,[[["treenode",3]]]],[11,"ne","","",1,[[["treenode",3]]]],[11,"eq","leetcode::merge_k_sorted_lists","",7,[[["listnode",3]]]],[11,"ne","","",7,[[["listnode",3]]]],[11,"partial_cmp","","",7,[[],[["option",4],["ordering",4]]]],[11,"fmt","leetcode","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","leetcode::merge_k_sorted_lists","",7,[[["formatter",3]],["result",6]]],[11,"fmt","leetcode::all_one","",16,[[["formatter",3]],["result",6]]]],"p":[[3,"ListNode"],[3,"TreeNode"],[3,"Solution"],[3,"Solution"],[3,"Solution"],[3,"Solution"],[3,"Solution"],[3,"ListNode"],[3,"Solution"],[3,"Codec"],[3,"Solution"],[3,"Matching"],[3,"Solution"],[3,"Solution"],[3,"Solution"],[3,"Solution"],[3,"AllOne"],[3,"Solution"],[3,"Solution"],[3,"Solution"],[3,"Solution"],[3,"Solution"],[3,"Solution"],[3,"Solution"],[3,"Solution"],[3,"Solution"],[3,"Solution"],[3,"Solution"],[3,"Solution"],[3,"Solution"],[3,"Solution"],[3,"Solution"],[3,"Solution"],[3,"Solution"],[3,"Solution"],[3,"Solution"],[3,"Solution"],[3,"Solution"],[3,"Solution"],[3,"Solution"],[3,"Solution"],[3,"Solution"],[3,"Solution"],[3,"Solution"],[3,"Solution"],[3,"Solution"],[3,"Solution"],[3,"Solution"],[3,"Solution"],[3,"Solution"],[3,"Solution"],[3,"Solution"],[3,"Solution"],[3,"Solution"],[3,"Solution"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);